schema {
  query: Query
  mutation: Mutation
}

"Funktionen, um Studentendaten zu lesen"
type Query {
  studenten(ort: String): [Student!]

  student(id: ID!): Student
}

"Funktionen, um Studenten neu anzulegen, zu aktualisieren oder zu löschen"
type Mutation {
  create(input: StudentInput!): CreatePayload

  update(input: StudentUpdateInput!): UpdatePayload

  delete(id: ID!): Boolean

  # Mutation, weil z.B. der Login-Zeitpunkt im IDM-System gespeichert wird
  # login(username: String!, password: String!): LoginResult
}

"Daten zur Adresse eines Studenten"
type Adresse {
  ort: String!
  plz: String
  land: String
}

"Daten zum Fach eines Studenten"
type Fach {
  name: String
  abkuerzung: String
}

"Datenschema zu einem Studenten, der gelesen wird"
type Student {
  id: Int!
  version: Int!
  vorname: String
  nachname: String
  geburstdatum: String
  matrikel: Int
  email: String
  studienfach: String
  abschluss: Abschluss
  homepage: String
  adresse: Adresse
}

"Enum-Typ für den Abschluss eines Studenten"
enum Abschluss {
  BACHELOR
  MASTER
}

"Daten zur Adresse eines neuen Studenten"
input AdresseInput {
  ort: String!
  plz: String
  land: String
}

"Daten zu den Fächern eines Studenten"
input FachInput {
  name: String!
  abkuerzung: String!
}

"Daten für einen neuen Studenten"
input StudentInput {
  vorname: String
  nachname: String
  geburstdatum: String
  matrikel: Int
  email: String
  studienfach: String
  abschluss: Abschluss
  homepage: String
  adresse: AdresseInput!
  fach: [FachInput!]
}

type CreatePayload {
  id: Int
}

"Daten für einen zu ändernden Studenten"
input StudentUpdateInput {
  id: ID
  version: Int
  vorname: String
  nachname: String
  geburstdatum: String
  matrikel: Int
  email: String
  studienfach: String
  abschluss: Abschluss
  homepage: String
}

type UpdatePayload {
  version: Int
}

#type LoginResult {
#  token: String!
#  expiresIn: String!
#  roles: [String]!
#}
