{
	"info": {
		"_postman_id": "b1d02cc0-1aec-4ccc-be78-dbf01c4ecbd8",
		"name": "REST",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29993923",
		"_collection_link": "https://martian-station-859163.postman.co/workspace/student~603e3c1f-35d0-4464-8eaa-75c3edb61b10/collection/29993923-b1d02cc0-1aec-4ccc-be78-dbf01c4ecbd8?action=share&source=collection_link&creator=29993923"
	},
	"item": [
		{
			"name": "Suche mit ID",
			"item": [
				{
					"name": "Vorhandene ID 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/hal+json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/hal\\+json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('ID im Self-Link', () => {\r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body._links.self.href).to.be.a('string').that.matches(/\\/rest\\/1$/u);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "cache-control",
								"sortOrder": 2,
								"infoTitle": "We recommend using this header",
								"info": "Postman added \"Cache-Control: no-cache\" as a precautionary measure to prevent the server from returning stale response when one makes repeated requests.\n\nYou can remove this header in the app settings or enter a new one with a different value.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Cache-Control",
								"value": "no-cache",
								"system": true,
								"type": "text"
							},
							{
								"name": "postman-token",
								"sortOrder": 3,
								"infoTitle": "We recommend using this header",
								"info": "The Postman-Token header appends a random UUID to every outgoing request. Postman adds this header for API developers to better debug requests sent and to ensure separate requests appear distinct to the receiving server.\n\nYou can remove this header in the app settings.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text"
							},
							{
								"name": "host",
								"sortOrder": 6,
								"infoTitle": "We recommend using this header",
								"info": "The Host header is added to identify the domain name for which a request is being sent to the server. This header is implicitly sent by every HTTP client.\n\nYou can remove the header or enter a new one with a different value. It is most likely that without this header, your request will return an HTTP 400 error.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Host",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text"
							},
							{
								"name": "user-agent",
								"sortOrder": 7,
								"infoTitle": "We recommend using this header",
								"info": "The User-Agent header is added to help the server identify Postman as the HTTP requesting application or client.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "User-Agent",
								"value": "PostmanRuntime/7.32.1",
								"system": true,
								"type": "text"
							},
							{
								"name": "accept",
								"sortOrder": 8,
								"infoTitle": "We recommend using this header",
								"info": "The \"Accept: */*\" header is added to tell the server that Postman can understand and process all forms of response content types.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept",
								"value": "*/*",
								"system": true,
								"type": "text"
							},
							{
								"name": "accept-encoding",
								"sortOrder": 9,
								"infoTitle": "We recommend using this header",
								"info": "The Accept-Encoding header is added to indicate to the server that Postman HTTP client supports a defined list of content-encoding or compression algorithms as response.\n\nYou can remove the header or enter a new one with a different value. Doing that may not accurately render the response within the app.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"system": true,
								"type": "text"
							},
							{
								"name": "connection",
								"sortOrder": 10,
								"infoTitle": "We recommend using this header",
								"info": "Postman added the Connection header to indicate the server to keep the underlying network connection open once the current response is received. This allows Postman to reuse the same connection for faster response times in subsequent requests to the same server.\n\nYou can remove this header or enter a new one with a different value, such as `Connection: Close` to control this behaviour.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Connection",
								"value": "keep-alive",
								"system": true,
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"id": 0
							}
						],
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Vorhandene ID 1 mit If-None-Match",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 304', () => {\r",
									"    pm.response.to.have.status(304);\r",
									"});\r",
									"pm.test('Leerer Body', () => {\r",
									"    const body = pm.response.text();\r",
									"    pm.expect(body).to.be.a('string').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text"
							},
							{
								"key": "If-None-Match",
								"value": "\"0\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Vorhandene ID 1 mit falscher Versionsnummer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/hal+json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/hal\\+json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('ID im Self-Link', () => {\r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body._links.self.href).to.be.a('string').that.matches(/\\/rest\\/1$/u);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "cache-control",
								"sortOrder": 2,
								"infoTitle": "We recommend using this header",
								"info": "Postman added \"Cache-Control: no-cache\" as a precautionary measure to prevent the server from returning stale response when one makes repeated requests.\n\nYou can remove this header in the app settings or enter a new one with a different value.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Cache-Control",
								"value": "no-cache",
								"system": true,
								"type": "text"
							},
							{
								"name": "postman-token",
								"sortOrder": 3,
								"infoTitle": "We recommend using this header",
								"info": "The Postman-Token header appends a random UUID to every outgoing request. Postman adds this header for API developers to better debug requests sent and to ensure separate requests appear distinct to the receiving server.\n\nYou can remove this header in the app settings.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text"
							},
							{
								"name": "host",
								"sortOrder": 6,
								"infoTitle": "We recommend using this header",
								"info": "The Host header is added to identify the domain name for which a request is being sent to the server. This header is implicitly sent by every HTTP client.\n\nYou can remove the header or enter a new one with a different value. It is most likely that without this header, your request will return an HTTP 400 error.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Host",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text"
							},
							{
								"name": "user-agent",
								"sortOrder": 7,
								"infoTitle": "We recommend using this header",
								"info": "The User-Agent header is added to help the server identify Postman as the HTTP requesting application or client.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "User-Agent",
								"value": "PostmanRuntime/7.32.1",
								"system": true,
								"type": "text"
							},
							{
								"name": "accept",
								"sortOrder": 8,
								"infoTitle": "We recommend using this header",
								"info": "The \"Accept: */*\" header is added to tell the server that Postman can understand and process all forms of response content types.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept",
								"value": "*/*",
								"system": true,
								"type": "text"
							},
							{
								"name": "accept-encoding",
								"sortOrder": 9,
								"infoTitle": "We recommend using this header",
								"info": "The Accept-Encoding header is added to indicate to the server that Postman HTTP client supports a defined list of content-encoding or compression algorithms as response.\n\nYou can remove the header or enter a new one with a different value. Doing that may not accurately render the response within the app.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"system": true,
								"type": "text"
							},
							{
								"name": "connection",
								"sortOrder": 10,
								"infoTitle": "We recommend using this header",
								"info": "Postman added the Connection header to indicate the server to keep the underlying network connection open once the current response is received. This allows Postman to reuse the same connection for faster response times in subsequent requests to the same server.\n\nYou can remove this header or enter a new one with a different value, such as `Connection: Close` to control this behaviour.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Connection",
								"value": "keep-alive",
								"system": true,
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"id": 0
							},
							{
								"key": "If-None-Match",
								"value": "0",
								"type": "text",
								"id": 1
							}
						],
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Nicht vorhandene ID 999999",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 404', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('ProblemDetails im Response Body', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { message, error, statusCode } = body;\r",
									"    pm.expect(message).to.be.a('string').that.includes('999999');\r",
									"    pm.expect(error).to.be.equal('Not Found');\r",
									"    pm.expect(statusCode).to.be.equal(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "999999"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Suche mit Suchkriterien",
			"item": [
				{
					"name": "Ohne Query-Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/hal+json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/hal\\+json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body: mind. 1 Student und Self-Link vorhanden', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { studenten } = body._embedded;\r",
									"    pm.expect(studenten).to.be.an('array').that.is.not.empty;\r",
									"    studenten.map(student => student._links.self.href)\r",
									"        .forEach(href => pm.expect(href).to.be.a('string').that.matches(/\\/rest\\/[1-9]\\d*$/u));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "cache-control",
								"sortOrder": 2,
								"infoTitle": "We recommend using this header",
								"info": "Postman added \"Cache-Control: no-cache\" as a precautionary measure to prevent the server from returning stale response when one makes repeated requests.\n\nYou can remove this header in the app settings or enter a new one with a different value.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Cache-Control",
								"value": "no-cache",
								"system": true,
								"type": "text",
								"id": 0
							},
							{
								"name": "postman-token",
								"sortOrder": 3,
								"infoTitle": "We recommend using this header",
								"info": "The Postman-Token header appends a random UUID to every outgoing request. Postman adds this header for API developers to better debug requests sent and to ensure separate requests appear distinct to the receiving server.\n\nYou can remove this header in the app settings.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 1
							},
							{
								"name": "host",
								"sortOrder": 6,
								"infoTitle": "We recommend using this header",
								"info": "The Host header is added to identify the domain name for which a request is being sent to the server. This header is implicitly sent by every HTTP client.\n\nYou can remove the header or enter a new one with a different value. It is most likely that without this header, your request will return an HTTP 400 error.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Host",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 2
							},
							{
								"name": "user-agent",
								"sortOrder": 7,
								"infoTitle": "We recommend using this header",
								"info": "The User-Agent header is added to help the server identify Postman as the HTTP requesting application or client.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "User-Agent",
								"value": "PostmanRuntime/7.31.1",
								"system": true,
								"type": "text",
								"id": 3
							},
							{
								"name": "accept",
								"sortOrder": 8,
								"infoTitle": "We recommend using this header",
								"info": "The \"Accept: */*\" header is added to tell the server that Postman can understand and process all forms of response content types.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept",
								"value": "*/*",
								"system": true,
								"type": "text",
								"id": 4,
								"disabled": true
							},
							{
								"name": "accept-encoding",
								"sortOrder": 9,
								"infoTitle": "We recommend using this header",
								"info": "The Accept-Encoding header is added to indicate to the server that Postman HTTP client supports a defined list of content-encoding or compression algorithms as response.\n\nYou can remove the header or enter a new one with a different value. Doing that may not accurately render the response within the app.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"system": true,
								"type": "text",
								"id": 5
							},
							{
								"name": "connection",
								"sortOrder": 10,
								"infoTitle": "We recommend using this header",
								"info": "Postman added the Connection header to indicate the server to keep the underlying network connection open once the current response is received. This allows Postman to reuse the same connection for faster response times in subsequent requests to the same server.\n\nYou can remove this header or enter a new one with a different value, such as `Connection: Close` to control this behaviour.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Connection",
								"value": "keep-alive",
								"system": true,
								"type": "text",
								"id": 6
							},
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"id": 7
							}
						],
						"url": {
							"raw": "{{rest_url}}",
							"host": [
								"{{rest_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ein gültiger Query-Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/hal+json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/hal\\+json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body: mind. 1 Student und Self-Link vorhanden', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { studenten } = body._embedded;\r",
									"    pm.expect(studenten).to.be.an('array').that.is.not.empty;\r",
									"    studenten.map(student => student._links.self.href)\r",
									"        .forEach(href => pm.expect(href).to.be.a('string').that.matches(/\\/rest\\/[1-9]\\d*$/u));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "cache-control",
								"sortOrder": 2,
								"infoTitle": "We recommend using this header",
								"info": "Postman added \"Cache-Control: no-cache\" as a precautionary measure to prevent the server from returning stale response when one makes repeated requests.\n\nYou can remove this header in the app settings or enter a new one with a different value.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Cache-Control",
								"value": "no-cache",
								"system": true,
								"type": "text",
								"id": 0
							},
							{
								"name": "postman-token",
								"sortOrder": 3,
								"infoTitle": "We recommend using this header",
								"info": "The Postman-Token header appends a random UUID to every outgoing request. Postman adds this header for API developers to better debug requests sent and to ensure separate requests appear distinct to the receiving server.\n\nYou can remove this header in the app settings.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 1
							},
							{
								"name": "host",
								"sortOrder": 6,
								"infoTitle": "We recommend using this header",
								"info": "The Host header is added to identify the domain name for which a request is being sent to the server. This header is implicitly sent by every HTTP client.\n\nYou can remove the header or enter a new one with a different value. It is most likely that without this header, your request will return an HTTP 400 error.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Host",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 2
							},
							{
								"name": "user-agent",
								"sortOrder": 7,
								"infoTitle": "We recommend using this header",
								"info": "The User-Agent header is added to help the server identify Postman as the HTTP requesting application or client.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "User-Agent",
								"value": "PostmanRuntime/7.31.1",
								"system": true,
								"type": "text",
								"id": 3
							},
							{
								"name": "accept",
								"sortOrder": 8,
								"infoTitle": "We recommend using this header",
								"info": "The \"Accept: */*\" header is added to tell the server that Postman can understand and process all forms of response content types.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept",
								"value": "*/*",
								"system": true,
								"type": "text",
								"id": 4,
								"disabled": true
							},
							{
								"name": "accept-encoding",
								"sortOrder": 9,
								"infoTitle": "We recommend using this header",
								"info": "The Accept-Encoding header is added to indicate to the server that Postman HTTP client supports a defined list of content-encoding or compression algorithms as response.\n\nYou can remove the header or enter a new one with a different value. Doing that may not accurately render the response within the app.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"system": true,
								"type": "text",
								"id": 5
							},
							{
								"name": "connection",
								"sortOrder": 10,
								"infoTitle": "We recommend using this header",
								"info": "Postman added the Connection header to indicate the server to keep the underlying network connection open once the current response is received. This allows Postman to reuse the same connection for faster response times in subsequent requests to the same server.\n\nYou can remove this header or enter a new one with a different value, such as `Connection: Close` to control this behaviour.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Connection",
								"value": "keep-alive",
								"system": true,
								"type": "text",
								"id": 6
							},
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"id": 7
							}
						],
						"url": {
							"raw": "{{rest_url}}?abschluss=BACHELOR",
							"host": [
								"{{rest_url}}"
							],
							"query": [
								{
									"key": "abschluss",
									"value": "BACHELOR"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Query-Parameter mit Teilstring",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/hal+json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/hal\\+json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body: mind. 1 Student und Self-Link vorhanden', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { studenten } = body._embedded;\r",
									"    pm.expect(studenten).to.be.an('array').that.is.not.empty;\r",
									"    studenten.map(student => student._links.self.href)\r",
									"        .forEach(href => pm.expect(href).to.be.a('string').that.matches(/\\/rest\\/[1-9]\\d*$/u));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "cache-control",
								"sortOrder": 2,
								"infoTitle": "We recommend using this header",
								"info": "Postman added \"Cache-Control: no-cache\" as a precautionary measure to prevent the server from returning stale response when one makes repeated requests.\n\nYou can remove this header in the app settings or enter a new one with a different value.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Cache-Control",
								"value": "no-cache",
								"system": true,
								"type": "text",
								"id": 0
							},
							{
								"name": "postman-token",
								"sortOrder": 3,
								"infoTitle": "We recommend using this header",
								"info": "The Postman-Token header appends a random UUID to every outgoing request. Postman adds this header for API developers to better debug requests sent and to ensure separate requests appear distinct to the receiving server.\n\nYou can remove this header in the app settings.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 1
							},
							{
								"name": "host",
								"sortOrder": 6,
								"infoTitle": "We recommend using this header",
								"info": "The Host header is added to identify the domain name for which a request is being sent to the server. This header is implicitly sent by every HTTP client.\n\nYou can remove the header or enter a new one with a different value. It is most likely that without this header, your request will return an HTTP 400 error.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Host",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 2
							},
							{
								"name": "user-agent",
								"sortOrder": 7,
								"infoTitle": "We recommend using this header",
								"info": "The User-Agent header is added to help the server identify Postman as the HTTP requesting application or client.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "User-Agent",
								"value": "PostmanRuntime/7.31.1",
								"system": true,
								"type": "text",
								"id": 3
							},
							{
								"name": "accept",
								"sortOrder": 8,
								"infoTitle": "We recommend using this header",
								"info": "The \"Accept: */*\" header is added to tell the server that Postman can understand and process all forms of response content types.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept",
								"value": "*/*",
								"system": true,
								"type": "text",
								"id": 4,
								"disabled": true
							},
							{
								"name": "accept-encoding",
								"sortOrder": 9,
								"infoTitle": "We recommend using this header",
								"info": "The Accept-Encoding header is added to indicate to the server that Postman HTTP client supports a defined list of content-encoding or compression algorithms as response.\n\nYou can remove the header or enter a new one with a different value. Doing that may not accurately render the response within the app.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"system": true,
								"type": "text",
								"id": 5
							},
							{
								"name": "connection",
								"sortOrder": 10,
								"infoTitle": "We recommend using this header",
								"info": "Postman added the Connection header to indicate the server to keep the underlying network connection open once the current response is received. This allows Postman to reuse the same connection for faster response times in subsequent requests to the same server.\n\nYou can remove this header or enter a new one with a different value, such as `Connection: Close` to control this behaviour.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Connection",
								"value": "keep-alive",
								"system": true,
								"type": "text",
								"id": 6
							},
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"id": 7
							}
						],
						"url": {
							"raw": "{{rest_url}}?adresse=New",
							"host": [
								"{{rest_url}}"
							],
							"query": [
								{
									"key": "adresse",
									"value": "New"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mehrere gültige Query-Parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/hal+json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/hal\\+json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body: mind. 1 Student und Self-Link vorhanden', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { studenten } = body._embedded;\r",
									"    pm.expect(studenten).to.be.an('array').that.is.not.empty;\r",
									"    studenten.map(student => student._links.self.href)\r",
									"        .forEach(href => pm.expect(href).to.be.a('string').that.matches(/\\/rest\\/[1-9]\\d*$/u));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "cache-control",
								"sortOrder": 2,
								"infoTitle": "We recommend using this header",
								"info": "Postman added \"Cache-Control: no-cache\" as a precautionary measure to prevent the server from returning stale response when one makes repeated requests.\n\nYou can remove this header in the app settings or enter a new one with a different value.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Cache-Control",
								"value": "no-cache",
								"system": true,
								"type": "text",
								"id": 0
							},
							{
								"name": "postman-token",
								"sortOrder": 3,
								"infoTitle": "We recommend using this header",
								"info": "The Postman-Token header appends a random UUID to every outgoing request. Postman adds this header for API developers to better debug requests sent and to ensure separate requests appear distinct to the receiving server.\n\nYou can remove this header in the app settings.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 1
							},
							{
								"name": "host",
								"sortOrder": 6,
								"infoTitle": "We recommend using this header",
								"info": "The Host header is added to identify the domain name for which a request is being sent to the server. This header is implicitly sent by every HTTP client.\n\nYou can remove the header or enter a new one with a different value. It is most likely that without this header, your request will return an HTTP 400 error.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Host",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 2
							},
							{
								"name": "user-agent",
								"sortOrder": 7,
								"infoTitle": "We recommend using this header",
								"info": "The User-Agent header is added to help the server identify Postman as the HTTP requesting application or client.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "User-Agent",
								"value": "PostmanRuntime/7.31.1",
								"system": true,
								"type": "text",
								"id": 3
							},
							{
								"name": "accept",
								"sortOrder": 8,
								"infoTitle": "We recommend using this header",
								"info": "The \"Accept: */*\" header is added to tell the server that Postman can understand and process all forms of response content types.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept",
								"value": "*/*",
								"system": true,
								"type": "text",
								"id": 4,
								"disabled": true
							},
							{
								"name": "accept-encoding",
								"sortOrder": 9,
								"infoTitle": "We recommend using this header",
								"info": "The Accept-Encoding header is added to indicate to the server that Postman HTTP client supports a defined list of content-encoding or compression algorithms as response.\n\nYou can remove the header or enter a new one with a different value. Doing that may not accurately render the response within the app.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"system": true,
								"type": "text",
								"id": 5
							},
							{
								"name": "connection",
								"sortOrder": 10,
								"infoTitle": "We recommend using this header",
								"info": "Postman added the Connection header to indicate the server to keep the underlying network connection open once the current response is received. This allows Postman to reuse the same connection for faster response times in subsequent requests to the same server.\n\nYou can remove this header or enter a new one with a different value, such as `Connection: Close` to control this behaviour.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Connection",
								"value": "keep-alive",
								"system": true,
								"type": "text",
								"id": 6
							},
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"id": 7
							}
						],
						"url": {
							"raw": "{{rest_url}}?abschluss=BACHELOR&vorname=Oliver",
							"host": [
								"{{rest_url}}"
							],
							"query": [
								{
									"key": "abschluss",
									"value": "BACHELOR"
								},
								{
									"key": "vorname",
									"value": "Oliver"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Nicht vorhandene Property",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 404', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "cache-control",
								"sortOrder": 2,
								"infoTitle": "We recommend using this header",
								"info": "Postman added \"Cache-Control: no-cache\" as a precautionary measure to prevent the server from returning stale response when one makes repeated requests.\n\nYou can remove this header in the app settings or enter a new one with a different value.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Cache-Control",
								"value": "no-cache",
								"system": true,
								"type": "text",
								"id": 0
							},
							{
								"name": "postman-token",
								"sortOrder": 3,
								"infoTitle": "We recommend using this header",
								"info": "The Postman-Token header appends a random UUID to every outgoing request. Postman adds this header for API developers to better debug requests sent and to ensure separate requests appear distinct to the receiving server.\n\nYou can remove this header in the app settings.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 1
							},
							{
								"name": "host",
								"sortOrder": 6,
								"infoTitle": "We recommend using this header",
								"info": "The Host header is added to identify the domain name for which a request is being sent to the server. This header is implicitly sent by every HTTP client.\n\nYou can remove the header or enter a new one with a different value. It is most likely that without this header, your request will return an HTTP 400 error.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Host",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 2
							},
							{
								"name": "user-agent",
								"sortOrder": 7,
								"infoTitle": "We recommend using this header",
								"info": "The User-Agent header is added to help the server identify Postman as the HTTP requesting application or client.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "User-Agent",
								"value": "PostmanRuntime/7.31.1",
								"system": true,
								"type": "text",
								"id": 3
							},
							{
								"name": "accept",
								"sortOrder": 8,
								"infoTitle": "We recommend using this header",
								"info": "The \"Accept: */*\" header is added to tell the server that Postman can understand and process all forms of response content types.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept",
								"value": "*/*",
								"system": true,
								"type": "text",
								"id": 4,
								"disabled": true
							},
							{
								"name": "accept-encoding",
								"sortOrder": 9,
								"infoTitle": "We recommend using this header",
								"info": "The Accept-Encoding header is added to indicate to the server that Postman HTTP client supports a defined list of content-encoding or compression algorithms as response.\n\nYou can remove the header or enter a new one with a different value. Doing that may not accurately render the response within the app.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"system": true,
								"type": "text",
								"id": 5
							},
							{
								"name": "connection",
								"sortOrder": 10,
								"infoTitle": "We recommend using this header",
								"info": "Postman added the Connection header to indicate the server to keep the underlying network connection open once the current response is received. This allows Postman to reuse the same connection for faster response times in subsequent requests to the same server.\n\nYou can remove this header or enter a new one with a different value, such as `Connection: Close` to control this behaviour.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Connection",
								"value": "keep-alive",
								"system": true,
								"type": "text",
								"id": 6
							},
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"id": 7
							}
						],
						"url": {
							"raw": "{{rest_url}}?hobby=fussball",
							"host": [
								"{{rest_url}}"
							],
							"query": [
								{
									"key": "hobby",
									"value": "fussball"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Nicht vorhandener Wert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 404', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"name": "cache-control",
								"sortOrder": 2,
								"infoTitle": "We recommend using this header",
								"info": "Postman added \"Cache-Control: no-cache\" as a precautionary measure to prevent the server from returning stale response when one makes repeated requests.\n\nYou can remove this header in the app settings or enter a new one with a different value.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Cache-Control",
								"value": "no-cache",
								"system": true,
								"type": "text",
								"id": 0
							},
							{
								"name": "postman-token",
								"sortOrder": 3,
								"infoTitle": "We recommend using this header",
								"info": "The Postman-Token header appends a random UUID to every outgoing request. Postman adds this header for API developers to better debug requests sent and to ensure separate requests appear distinct to the receiving server.\n\nYou can remove this header in the app settings.",
								"allowedToToggle": false,
								"disableEdit": true,
								"previewSettingsLink": "Go to settings",
								"key": "Postman-Token",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 1
							},
							{
								"name": "host",
								"sortOrder": 6,
								"infoTitle": "We recommend using this header",
								"info": "The Host header is added to identify the domain name for which a request is being sent to the server. This header is implicitly sent by every HTTP client.\n\nYou can remove the header or enter a new one with a different value. It is most likely that without this header, your request will return an HTTP 400 error.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Host",
								"value": "<calculated when request is sent>",
								"system": true,
								"type": "text",
								"id": 2
							},
							{
								"name": "user-agent",
								"sortOrder": 7,
								"infoTitle": "We recommend using this header",
								"info": "The User-Agent header is added to help the server identify Postman as the HTTP requesting application or client.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "User-Agent",
								"value": "PostmanRuntime/7.31.1",
								"system": true,
								"type": "text",
								"id": 3
							},
							{
								"name": "accept",
								"sortOrder": 8,
								"infoTitle": "We recommend using this header",
								"info": "The \"Accept: */*\" header is added to tell the server that Postman can understand and process all forms of response content types.\n\nIt is recommended that this header be sent, but you can remove the header or enter a new one with a different value.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept",
								"value": "*/*",
								"system": true,
								"type": "text",
								"id": 4,
								"disabled": true
							},
							{
								"name": "accept-encoding",
								"sortOrder": 9,
								"infoTitle": "We recommend using this header",
								"info": "The Accept-Encoding header is added to indicate to the server that Postman HTTP client supports a defined list of content-encoding or compression algorithms as response.\n\nYou can remove the header or enter a new one with a different value. Doing that may not accurately render the response within the app.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Accept-Encoding",
								"value": "gzip, deflate, br",
								"system": true,
								"type": "text",
								"id": 5
							},
							{
								"name": "connection",
								"sortOrder": 10,
								"infoTitle": "We recommend using this header",
								"info": "Postman added the Connection header to indicate the server to keep the underlying network connection open once the current response is received. This allows Postman to reuse the same connection for faster response times in subsequent requests to the same server.\n\nYou can remove this header or enter a new one with a different value, such as `Connection: Close` to control this behaviour.",
								"allowedToToggle": true,
								"disableEdit": true,
								"key": "Connection",
								"value": "keep-alive",
								"system": true,
								"type": "text",
								"id": 6
							},
							{
								"key": "Accept",
								"value": "application/hal+json",
								"type": "text",
								"id": 7
							}
						],
						"url": {
							"raw": "{{rest_url}}?abschluss=KEINER",
							"host": [
								"{{rest_url}}"
							],
							"query": [
								{
									"key": "abschluss",
									"value": "KEINER"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Über die REST-Schnittstelle nach Bücher mit Suchkriterien suchen."
		},
		{
			"name": "Neuanlegen",
			"item": [
				{
					"name": "Neuer Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 201', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test('Location', () => {\r",
									"    const { response } = pm;\r",
									"    const location = response.headers.get('Location');\r",
									"    pm.expect(location).to.match(/\\/rest\\/[1-9]\\d*/u);\r",
									"});\r",
									"pm.test('Leerer Body', () => {\r",
									"    const body = pm.response.text();\r",
									"    pm.expect(body).to.be.a('string').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vorname\": \"Jane\",\r\n  \"nachname\": \"Doe\",\r\n  \"geburstdatum\": \"2000-01-01\",\r\n  \"matrikel\": \"62340\",\r\n  \"email\": \"jane.doe@post.resto\",\r\n  \"studienfach\": \"WIIB\",\r\n  \"abschluss\": \"BACHELOR\",\r\n  \"homepage\": \"https://post.rest\",\r\n  \"adresse\": {\r\n    \"ort\": \"POSTOrt\",\r\n    \"plz\": \"123\",\r\n    \"land\": \"USA\"\r\n  },\r\n  \"fach\": {\r\n    \"name\": \"Sofwarearchitektur\",\r\n    \"abkuerzung\": \"SWA\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}",
							"host": [
								"{{rest_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Neuer Student mit bereits existierender E-Mail-Adresse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 422', () => {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Fehlermeldung im Response Body', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { message } = body;\r",
									"    pm.expect(message).to.be.a('string').that.includes('Matrikel');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vorname\": \"Email\",\r\n  \"nachname\": \"Vorhanden\",\r\n  \"geburstdatum\": \"2000-01-01\",\r\n  \"matrikel\": \"34921\",\r\n  \"email\": \"jane.doe@post.rest\",\r\n  \"studienfach\": \"WIIB\",\r\n  \"abschluss\": \"BACHELOR\",\r\n  \"homepage\": \"https://post.rest\",\r\n  \"adresse\": {\r\n    \"ort\": \"POSTOrt\",\r\n    \"plz\": \"123\",\r\n    \"land\": \"USA\"\r\n  },\r\n  \"fach\": [{\r\n    \"name\": \"Softwarearchitektur\",\r\n    \"abkuerzung\": \"SWA\"\r\n  }]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}",
							"host": [
								"{{rest_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Neuer Student mit ungültigen Daten",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 400', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Fehlermeldungen im Response Body', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { message } = body;\r",
									"    const props = ['geburstdatum', 'email', 'homepage'];\r",
									"    pm.expect(message).to.be.an('array').that.has.a.lengthOf(props.length);\r",
									"    message.forEach(msg => pm.expect(msg).to.be.a('string').that.includes.oneOf(props));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vorname\": \"Max\",\r\n  \"nachname\": \"Mustermann\",\r\n  \"geburstdatum\": \"1-1-1\",\r\n  \"matrikel\": \"12345\",\r\n  \"email\": \"falsche.email\",\r\n  \"studienfach\": \"WIIB\",\r\n  \"abschluss\": \"BACHELOR\",\r\n  \"homepage\": \"falsche-homepage\",\r\n  \"adresse\": {\r\n    \"ort\": \"Karlsruhe\",\r\n    \"plz\": \"76133\",\r\n    \"land\": \"GERMANY\"\r\n  },\r\n  \"fach\": [{\r\n    \"name\": \"Softwarearchitektur\",\r\n    \"abkuerzung\": \"SWA\"\r\n  }]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}",
							"host": [
								"{{rest_url}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Über die REST-Schnittstelle neue Bücher anlegen",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.sendRequest({",
							"    url: 'https://localhost:3000/auth/login',",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/x-www-form-urlencoded'",
							"    },",
							"    body: 'username=admin&password=p',",
							"}, (err, res) => pm.collectionVariables.set('TOKEN', res.json().token));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Ändern",
			"item": [
				{
					"name": "Vorhandene ID 30 ändern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 204', () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"pm.test('Leerer Body', () => {\r",
									"    const body = pm.response.text();\r",
									"    pm.expect(body).to.be.a('string').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "If-Match",
								"value": "\"0\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vorname\": \"Liam\",\r\n  \"nachname\": \"Williams\",\r\n  \"geburstdatum\": \"2000-01-01\",\r\n  \"matrikel\": \"12357\",\r\n  \"email\": \"liam.williams@example.com\",\r\n  \"studienfach\": \"WIIB\",\r\n  \"abschluss\": \"BACHELOR\",\r\n  \"homepage\": \"https://post.rest\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Vorhandene ID 30 mit falscher Versionsnummer ändern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 412', () => {\r",
									"    pm.response.to.have.status(412);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Fehlermeldung im Body', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { message } = body;\r",
									"    pm.expect(message).to.be.a('string').that.includes('Versionsnummer');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "If-Match",
								"value": "0",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vorname\": \"Liam\",\r\n  \"nachname\": \"Williams\",\r\n  \"geburstdatum\": \"2000-01-01\",\r\n  \"matrikel\": \"12357\",\r\n  \"email\": \"liam.williams@example.com\",\r\n  \"studienfach\": \"WIIB\",\r\n  \"abschluss\": \"BACHELOR\",\r\n  \"homepage\": \"https://post.rest\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Vorhandene ID 30 ohne Versionsnummer ändern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 428', () => {\r",
									"    pm.response.to.have.status(428);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Fehlermeldung im Body', () => {\r",
									"    const msg = pm.response.text();\r",
									"    pm.expect(msg).to.be.a('string').that.includes('If-Match');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vorname\": \"Liam\",\r\n  \"nachname\": \"Williams\",\r\n  \"geburstdatum\": \"2000-01-01\",\r\n  \"matrikel\": \"12357\",\r\n  \"email\": \"liam.williams@example.com\",\r\n  \"studienfach\": \"WIIB\",\r\n  \"abschluss\": \"BACHELOR\",\r\n  \"homepage\": \"https://post.rest\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Vorhandene ID 30 mit alter Versionsnummer ändern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 412', () => {\r",
									"    pm.response.to.have.status(412);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Fehlermeldung im Body', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { message } = body;\r",
									"    pm.expect(message).to.be.a('string').that.includes('Versionsnummer');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "If-Match",
								"value": "\"-1\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vorname\": \"Liam\",\r\n  \"nachname\": \"Williams\",\r\n  \"geburstdatum\": \"2000-01-01\",\r\n  \"matrikel\": \"12357\",\r\n  \"email\": \"liam.williams@example.com\",\r\n  \"studienfach\": \"WIIB\",\r\n  \"abschluss\": \"BACHELOR\",\r\n  \"homepage\": \"https://post.rest\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "30"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Nicht vorhandene ID 999999 ändern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 404', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Fehlermeldung im Body', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { message } = body;\r",
									"    pm.expect(message).to.be.a('string').that.includes('999999');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "If-Match",
								"value": "\"0\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vorname\": \"Liam\",\r\n  \"nachname\": \"Williams\",\r\n  \"geburstdatum\": \"2000-01-01\",\r\n  \"matrikel\": \"12357\",\r\n  \"email\": \"liam.williams@example.com\",\r\n  \"studienfach\": \"WIIB\",\r\n  \"abschluss\": \"BACHELOR\",\r\n  \"homepage\": \"https://post.rest\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "999999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Vorhandene ID 30 mit ungültigen Daten ändern",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 400', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Fehlermeldungen im Response Body', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { message } = body;\r",
									"    const props = ['geburstdatum', 'email', 'homepage'];\r",
									"    pm.expect(message).to.be.an('array').that.has.a.lengthOf(props.length);\r",
									"    message.forEach(msg => pm.expect(msg).to.be.a('string').that.includes.oneOf(props));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "If-Match",
								"value": "\"0\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"vorname\": \"Liam\",\r\n  \"nachname\": \"Williams\",\r\n  \"geburstdatum\": \"falsches-geburtsdatum\",\r\n  \"matrikel\": \"12357\",\r\n  \"email\": \"falsche-email\",\r\n  \"studienfach\": \"WIIB\",\r\n  \"abschluss\": \"BACHELOR\",\r\n  \"homepage\": \"falsche-homepage\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "30"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Löschen",
			"item": [
				{
					"name": "Vorhandene ID 50 löschen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 204', () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"pm.test('Leerer Body', () => {\r",
									"    const body = pm.response.text();\r",
									"    pm.expect(body).to.be.a('string').that.is.empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "If-Match",
								"value": "\"0\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Nicht vorhandene ID 999999 löschen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 404', () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "If-Match",
								"value": "\"0\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rest_url}}/:id",
							"host": [
								"{{rest_url}}"
							],
							"path": [
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "999999"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Über die REST-Schnittstelle vorhandene Bücher löschen",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{TOKEN}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.sendRequest({",
							"    url: 'https://localhost:3000/auth/login',",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/x-www-form-urlencoded',",
							"    },",
							"    body: 'username=admin&password=p',",
							"}, (err, res) => pm.collectionVariables.set('TOKEN', res.json().token));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Login als admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit token, expiresIn, roles', () => {\r",
									"    const body = pm.response.json();\r",
									"    const { token, expiresIn, roles } = body;\r",
									"    pm.expect(token).to.be.a('string').that.matches(/.+\\..+\\..+/u);\r",
									"    pm.expect(expiresIn).to.be.equal('1h');\r",
									"    pm.expect(roles).to.be.an('array').that.has.a.lengthOf(2).to.include.members(['admin', 'fachabteilung']);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "p",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{login_url}}",
							"host": [
								"{{login_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login mit falschem Passwort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 401', () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "FALSCH",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{login_url}}",
							"host": [
								"{{login_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login ohne Benutzerkennung",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 401', () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{login_url}}",
							"host": [
								"{{login_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rollen zu einem Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Statuscode 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Content-Type application/json', () => {\r",
									"    const { response } = pm;\r",
									"    const contentType = response.headers.get('Content-Type');\r",
									"    pm.expect(contentType).to.match(/^application\\/json(; charset=utf-8)?/u);\r",
									"});\r",
									"pm.test('Body mit Rollen', () => {\r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.be.an('array').that.has.a.lengthOf(2).to.include.members(['admin', 'fachabteilung']);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({\r",
									"    url: 'https://localhost:3000/auth/login',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/x-www-form-urlencoded'\r",
									"    },\r",
									"    body: 'username=admin&password=p'\r",
									"}, (err, res) => pm.collectionVariables.set('TOKEN', res.json().token));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "p",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://localhost:3000/auth/roles",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"auth",
								"roles"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "rest_url",
			"value": "{{base_url}}/rest",
			"type": "string"
		},
		{
			"key": "login_url",
			"value": "{{base_url}}/auth/login",
			"type": "string"
		},
		{
			"key": "TOKEN",
			"value": ""
		}
	]
}